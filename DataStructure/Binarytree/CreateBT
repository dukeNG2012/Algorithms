import java.util.LinkedList;
import java.util.Queue;

import javax.management.Query;

public class test1
{
    static class node
    {
        int key;
        node right, left;
        node(int data)
        {
            this.key = data;
            right = null;
            left = null;
        }
        
    }
    static node root;
    static node temp = root;
    static void inorder(node root)
    {
        if(root == null)
        {
            return;
        }
        inorder(root.left);
        System.out.print(root.key + "  ");
        
        inorder(root.right);
    }
    static void insert(node temp, int key)
    {
        if(temp == null)
        {
            root = new node(key);
            return;
        }
        //! sử dụng queue ở đây để represent data có trong root
        Queue<node> q = new LinkedList<node>();

        //! add vào, print từng data trong root rồi remove dần theo queue
        q.add(root);

        while(!q.isEmpty())
        {
            temp = q.peek();// check 
            // đầu của queue
            q.remove(); // xóa phần đầu
            if(temp.left == null)
            {
                temp.left = new node(key);
                break;
            }
            else
            {
                q.add(temp.left);
            }
                
            if(temp.right == null)
            {
                temp.right = new node(key);
                break;
            }
            else
            {
                q.add(temp.right);
            }
                
            
        }
    }
    // hàm này để xóa node delnode. 
    static void deleteDeepest(node root, node delnode)
    {
        Queue<node> q = new LinkedList<node>();
        q.add(root);

        while(!q.isEmpty())
        {
            temp = q.peek();
            q.remove();

            if(temp == delnode)
            {
                temp = null;
                return;
            }
            if(temp.right != null)
            {
                if(temp.right == delnode)
                {
                    temp.right = null;
                    return;
                }
                else
                {
                    q.add(temp.right);
                }
            }
            if(temp.left != null)
            {
                if(temp.left == delnode)
                {
                    temp.left = null;
                    return;
                }
                else
                {
                    q.add(temp.left);
                }   
            }
                
        }
    }

    // hàm này để tìm ra key và xóa nó bằng cái hàm keynode != null.
    static void delete(node root, int key)
    {
        if(root == null)
        {
            return;
        }
        if(root.left == null && root.right == null)
        {
            if(root.key == key)
            {
                root = null;
                return;
            }
            return;
        }

        Queue<node> q = new LinkedList<node>();
        q.add(root);
        node temp = null, keynode = null;

        while(!q.isEmpty())
        {
            temp = q.peek();
            q.remove();

            if(temp.key == key)
            {
                keynode = temp;
            }
            if(temp.left != null)
            {
                q.add(temp.left);
            }
            if(temp.right != null)
            {
                q.add(temp.right);
            }

        }
        if(keynode != null)
        {
            int x = temp.key;
            // xóa node temp
            deleteDeepest(root, temp);

            keynode.key = x;
        }
    }
    

    public static void main(String[] args)
    {
        root = new node(10);
		root.left = new node(11);
		root.left.left = new node(7);
		root.right = new node(9);
		root.right.left = new node(15);
		root.right.right = new node(8);

		System.out.print(
			"Inorder traversal before insertion:");
		inorder(root);

		int key = 12;
		insert(root, key);

		System.out.print(
			"\nInorder traversal after insertion:");
		inorder(root);

        int a = 11;
        delete(root, a);
 
        System.out.print("\nInorder traversal "
                         + "after deletion:");
        inorder(root);
    }
}
