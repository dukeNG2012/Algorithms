import java.util.LinkedList;
import java.util.Queue;

import javax.management.Query;

public class test1
{
    static class node
    {
        int key;
        node right, left;
        node(int data)
        {
            this.key = data;
            right = null;
            left = null;
        }
        
    }
    static node root;
    static node temp = root;
    static void inorder(node root)
    {
        if(root == null)
        {
            return;
        }
        inorder(root.left);
        System.out.print(root.key + "  ");
        
        inorder(root.right);
    }
    static void insert(node temp, int key)
    {
        if(temp == null)
        {
            root = new node(key);
            return;
        }
        //! sử dụng queue ở đây để represent data có trong root
        Queue<node> q = new LinkedList<node>();

        //! add vào, print từng data trong root rồi remove dần theo queue
        q.add(root);

        while(!q.isEmpty())
        {
            temp = q.peek();// check 
            // đầu của queue
            q.remove(); // xóa phần đầu
            if(temp.left == null)
            {
                temp.left = new node(key);
                break;
            }
            else
            {
                q.add(temp.left);
            }
                
            if(temp.right == null)
            {
                temp.right = new node(key);
                break;
            }
            else
            {
                q.add(temp.right);
            }
                
            
        }
    }
    public static void main(String[] args)
    {
        root = new node(10);
		root.left = new node(11);
		root.left.left = new node(7);
		root.right = new node(9);
		root.right.left = new node(15);
		root.right.right = new node(8);

		System.out.print(
			"Inorder traversal before insertion:");
		inorder(root);

		int key = 12;
		insert(root, key);

		System.out.print(
			"\nInorder traversal after insertion:");
		inorder(root);
    }
}
